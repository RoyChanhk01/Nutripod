name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["*"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  POSTGRES_DB: frd_proj
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: postgres
  IMAGE_TAG: latest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  server-test:
    runs-on: ubuntu-latest
    container: node:16
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - name: Testing
        run: |
          cd api
          yarn install
          yarn knex migrate:latest --env test
          CI=${{ env.CI }} yarn test
  server-build:
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    needs: server-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./api/
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nutripod:${{ env.IMAGE_TAG }}
  react-build:
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies and Generate Build
        env:
          REACT_APP_API_SERVER: ${{ secrets.REACT_APP_API_SERVER }}
          GENERATE_SOURCEMAP: false
          REACT_APP_SMS_AC_ID: ${{ secrets.REACT_APP_SMS_AC_ID }}
          REACT_APP_PHONE_NUMBER: ${{ secrets.REACT_APP_PHONE_NUMBER }}
          REACT_APP_SMS_API_KEY: ${{ secrets.REACT_APP_SMS_API_KEY }}
        run: |
          cd App
          yarn install
          yarn build
      # Share artifact inside workflow
      - name: Share artifact inside workflow
        uses: actions/upload-artifact@v3
        with:
          name: react-github-actions-build
          path: App/build
  react-deploy:
    runs-on: ubuntu-latest
    needs: react-build
    steps:
      # Download previously shared build
      - name: Get artifact
        uses: actions/download-artifact@v3
        with:
          name: react-github-actions-build
          path: react-github-actions-build
      # Set the credentials from repository settings/secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      # Copy the files from build folder to the S3 bucket
      - name: Deploy to S3
        run: aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} --delete
        working-directory: react-github-actions-build
      - name: Cloudfront Invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION }} --paths "/*"
  server-deploy:
    if: github.ref_name == 'production'
    runs-on: ubuntu-latest
    needs: server-build
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Deploy Docker Compose
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ~
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            docker compose pull
            docker compose --env-file .env.production.local up -d
          host: ${{ secrets.API_SERVER_IP_ADDR }}
          user: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
